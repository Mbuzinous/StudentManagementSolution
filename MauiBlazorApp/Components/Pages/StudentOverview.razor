@page "/students"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Elevoversigt</h3>

@if (students == null)
{
        <p>Indlæser...</p>
                    <button class="btn btn-success" @onclick="AddNewStudent">Tilføj elev</button>

}
else
{
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Fornavn</th>
                    <th>Efternavn</th>
                    <th>Studie-ID</th>
                @foreach (var day in Days)
                {
                            <th>@day.ToString("ddd dd/MM")</th>
                }
                    <th>Handlinger</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var student in students)
            {
                        <tr>
                            <td>@student.FirstName</td>
                            <td>@student.LastName</td>
                            <td>@student.StudyId</td>
                    @foreach (var day in Days)
                    {
                        var isAbsent = student.Absence.ContainsKey(day) && student.Absence[day];
                                    <td>
                                        <input type="checkbox" 
                                               checked="@isAbsent" 
                                               @onchange="async (e) => await ToggleAbsence(student.StudyId, day, (bool)e.Value)" />
                                    </td>
                    }
                            <td>
                                <a href="/student/@student.StudyId" class="btn btn-primary btn-sm">Rediger</a>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteStudent(student.StudyId)">Slet</button>
                            </td>
                        </tr>
            }
            </tbody>
        </table>

        <button class="btn btn-success" @onclick="AddNewStudent">Tilføj elev</button>
}

@code {
    private List<Student> students;
    private DateTime[] Days => Enumerable.Range(0, 5).Select(i => DateTime.Today.AddDays(i - (int)DateTime.Today.DayOfWeek + 1)).ToArray();

    protected override async Task OnInitializedAsync()
    {
        students = await Http.GetFromJsonAsync<List<Student>>("api/students");
    }

    private async Task ToggleAbsence(string studyId, DateTime date, bool isAbsent)
    {
        await Http.PostAsJsonAsync($"api/students/{studyId}/absence", new AbsenceRequest { Date = date, IsAbsent = isAbsent });
        await OnInitializedAsync(); // Genindlæs listen
    }

    private async Task DeleteStudent(string studyId)
    {
        await Http.DeleteAsync($"api/students/{studyId}");
        await OnInitializedAsync();
    }

    private void AddNewStudent()
    {
        Navigation.NavigateTo("/student/new");
    }

    public class Student
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string StudyId { get; set; }
        public Dictionary<DateTime, bool> Absence { get; set; } = new();
    }

    public class AbsenceRequest
    {
        public DateTime Date { get; set; }
        public bool IsAbsent { get; set; }
    }
}